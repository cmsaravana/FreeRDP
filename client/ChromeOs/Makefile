# Copyright (c) 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# GNU Makefile based on shared rules provided by the Native Client SDK.
# See README.Makefiles for more details.

VALID_TOOLCHAINS := pnacl glibc clang-newlib


ifndef FREERDP_NACL_SDK_ROOT
$(error FREERDP_NACL_SDK_ROOT is not set)
endif
ifndef FREERDP_NACL_OPENSSL_ROOT
$(error FREERDP_NACL_OPENSSL_ROOT is not set)
endif

NACL_SDK_ROOT := $(FREERDP_NACL_SDK_ROOT)
NACL_OPENSSL_ROOT := $(FREERDP_NACL_OPENSSL_ROOT)
#NACL_SDK_ROOT := /home/mkumara/gonacl/nacl_sdk/pepper_49

TARGET = graphics_2d

include $(NACL_SDK_ROOT)/tools/common.mk

#CHROME_ARGS += --allow-nacl-socket-api=localhost

DEPS = ppapi_simple nacl_io
LIBS = ppapi_cpp ppapi \
	freerdp-client2 serial-client disp-client encomsp-client rdpgfx-client \
	rdpsnd-client drdynvc-client echo-client tsmf-client rdpei-client \
	cliprdr-client audin-client rail-client parallel-client remdesk-client \
	rdpdr-client smartcard-client drive-client rdtk freerdp2 winpr2 \
	ssl crypto pthread nacl_io

CFLAGS = -w -Wall -I ../../winpr/include -I ../../include  -I ./ -c

EXTRA_LIB_PATHS+= -L../../winpr/libwinpr/ \
	-L../../channels/serial/client/ \
	-L../../channels/disp/client/ \
	-L../../channels/encomsp/client/ \
	-L../../channels/rdpgfx/client/ \
	-L../../channels/rdpsnd/client/ \
	-L../../channels/drdynvc/client/ \
	-L../../channels/echo/client/ \
	-L../../channels/tsmf/client/ \
	-L../../channels/rdpei/client/ \
	-L../../channels/cliprdr/client/ \
	-L../../channels/audin/client/ \
	-L../../channels/rail/client/ \
	-L../../channels/parallel/client/ \
	-L../../channels/remdesk/client/ \
	-L../../channels/rdpdr/client/ \
	-L../../channels/smartcard/client/ \
	-L../../channels/drive/client/ \
	-L../../libfreerdp/ \
	-L../../client/common/ \
	-L../../rdtk/librdtk/ \
        -L$(NACL_OPENSSL_ROOT)/lib

SOURCES = ./graphics_2d.cc

# Build rules generated by macros from common.mk:

$(foreach dep,$(DEPS),$(eval $(call DEPEND_RULE,$(dep))))
$(foreach src,$(SOURCES),$(eval $(call COMPILE_RULE,$(src),$(CFLAGS))))

# The PNaCl workflow uses both an unstripped and finalized/stripped binary.
# On NaCl, only produce a stripped binary for Release configs (not Debug).
ifneq (,$(or $(findstring pnacl,$(TOOLCHAIN)),$(findstring Release,$(CONFIG))))
$(eval $(call LINK_RULE,$(TARGET)_unstripped,$(SOURCES),$(LIBS),$(DEPS), $(EXTRA_LIB_PATHS)))
$(eval $(call STRIP_RULE,$(TARGET),$(TARGET)_unstripped))
else
$(eval $(call LINK_RULE,$(TARGET),$(SOURCES),$(LIBS),$(DEPS)))
endif

$(eval $(call NMF_RULE,$(TARGET),))

